module.exports=function(e,t){"use strict";var r={};function __webpack_require__(t){if(r[t]){return r[t].exports}var o=r[t]={i:t,l:false,exports:{}};e[t].call(o.exports,o,o.exports,__webpack_require__);o.l=true;return o.exports}__webpack_require__.ab=__dirname+"/";function startup(){return __webpack_require__(482)}return startup()}({482:function(e,t,r){const o=r(700);const n=r(788);(async()=>{try{const e=o.getInput("labels-to-fail");const t=o.getInput("repo-token");const r=e.split(",");if(!Array.isArray(r)&&r.length){throw new Error("Input labels-to-fail should be a comma separated string")}const s=new n.GitHub(t);const{owner:a,repo:l}=n.context.repo;const c=await s.checks.listForRef({owner:a,repo:l,ref:n.event.pull_request.head.sha});console.log("status checks");console.log(JSON.stringify(c));let{pull_request:{labels:u}}=n.context.payload;u=u.map(({name:e})=>e);const i=u.filter(e=>r.includes(e));if(i.length){const e=i.join(", ");throw new Error(`Labels to Fail found: ${e}`)}}catch(e){o.error(e);o.setFailed(e)}})()},700:function(module){module.exports=eval("require")("@actions/core")},788:function(module){module.exports=eval("require")("@actions/github")}});